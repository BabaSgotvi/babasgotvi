import { fetch } from 'wix-fetch';
import { STRIPE_SECRET_KEY } from 'public/PayKeys';
import wixData from 'wix-data';

const apiKey = STRIPE_SECRET_KEY; // DO NOT SHARE THIS KEY
const stripeApiUrl = "https://api.stripe.com/v1";

export async function charge(token, ids, amounts, email) {
    console.log("Charge has been called");
    const customerId = await createOrRetrieveCustomer(email);
    const cart = await createCart(ids, amounts, email, customerId);
    console.log(cart);
    const response = await fetch(`${stripeApiUrl}/charges`, {
        method: 'post',
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": "Bearer " + apiKey
        },
        body: encodeBody(token, cart)
    });
    if (response.status >= 200 && response.status < 300) {
        // transaction successful - get charge ID
        const ret = await response.json();
        issueOrder(ret.id, ids, amounts, cart.amount);
        return { "chargeId": ret.id };
    }
    // transaction failed - return error type
    let res = await response.json();
    let err = res.error.type;
    return { "error": err };
}

async function createOrRetrieveCustomer(email) {
    // Check if the customer exists
    const existingCustomerResponse = await fetch(`${stripeApiUrl}/customers?email=${email}`, {
        method: 'get',
        headers: {
            "Authorization": "Bearer " + apiKey
        }
    });
    if (existingCustomerResponse.status === 200) {
        const existingCustomerData = await existingCustomerResponse.json();
        if (existingCustomerData.data.length > 0) {
            return existingCustomerData.data[0].id;
        }
    }

    // If the customer does not exist, create a new one
    const newCustomerResponse = await fetch(`${stripeApiUrl}/customers`, {
        method: 'post',
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": "Bearer " + apiKey
        },
        body: `email=${email}`
    });
    if (newCustomerResponse.status === 200) {
        const newCustomerData = await newCustomerResponse.json();
        return newCustomerData.id;
    }

    // If creation fails, return null
    return null;
}

function encodeBody(token, cart) {
    let encoded = "";
    for (let [k, v] of Object.entries(cart)) {
        encoded = encoded.concat(k, "=", encodeURI(v), "&");
    }
    encoded = encoded.concat("source=", encodeURI(token));
    return encoded;
}

async function createCart(ids, amounts, email, customerId) {
    let totalPrice = 0;
    let description = "food order: ";
    // Create an array to store all the promises returned by the wixData queries
    let promises = [];

    // Iterate over the IDs and amounts
    ids.forEach((id, i) => {
        // Push each query promise to the array
        promises.push(
            wixData.query("FoodList")
                .eq("_id", id)
                .find()
                .then((results) => {
                    totalPrice += parseFloat(results.items[0].price) * amounts[i];
                    description += results.items[0].title + " x" + amounts[i] + ", ";
                })
        );
    });

    // Wait for all the promises to resolve
    await Promise.all(promises);

    // Round totalPrice to 2 decimal places
    totalPrice = totalPrice.toFixed(2);

    // Return the cart object
    return {
        "amount": (totalPrice * 100).toFixed(0), // convert to cents
        "currency": "BGN",
        "description": description,
        "receipt_email": email,
        "customer": customerId // Include the customer ID in the cart object
    };
}

async function issueOrder(chargeId, ids, amounts, amount) {
    console.log("order has been issued")
}
