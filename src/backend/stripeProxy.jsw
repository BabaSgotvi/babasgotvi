import { fetch } from 'wix-fetch';
import { STRIPE_SECRET_KEY } from 'public/PayKeys';
import wixData from 'wix-data';

const apiKey = STRIPE_SECRET_KEY; // DO NOT SHARE THIS KEY
let cart;

export async function createCart(ids, amounts) {
    // let totalPrice = 0;
    // let description = "";
    // for (i = 0; i < ids.length; i++) {
    //     let item = await getItemFromDatabase(ids[i]);
    //     totalPrice += parseFloat(item.price) * amounts[i];
    //     description += item.title + "x" + amounts[i] + ", ";
    // }

    // cart = {
    //     "amount": totalPrice * 100, // converts to cents
    //     "currency": "BGN",
    //     "description": "Поръчка: " + description,
    //     // "receipt_email": "
    // }
    cart =
    {
        "amount": 100,
        "currency": "BGN",
        "description": "Test charge",
    }
};
export async function charge(token) {
    const response = await fetch("https://api.stripe.com/v1/charges", {
        method: 'post',
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": "Bearer " + apiKey
        },
        body: encodeBody(token, cart)
    });
    if (response.status >= 200 && response.status < 300) {
        // transaction successful - get charge ID
        const ret = await response.json();
        // let id = await setPaidStatus(userId, ret.id);
        return { "chargeId": ret.id };
    }
    // transaction failed - return error type
    let res = await response.json();
    let err = res.error.type;
    return { "error": err };
}

function encodeBody(token, cart) {
    let encoded = "";
    for (let [k, v] of Object.entries(cart)) {
        encoded = encoded.concat(k, "=", encodeURI(v), "&");
    }
    encoded = encoded.concat("source=", encodeURI(token));
    return encoded;
}

async function getItemFromDatabase(id) {
    try {
        // Query the 'FoodList' collection to find the item with the specified ID
        const queryResult = await wixData.query('FoodList')
            .eq('_id', id) // Filter by the ID
            .find();

        // Check if any item was found
        if (queryResult.items.length > 0) {
            // Return the first item found (assuming IDs are unique)
            return queryResult.items[0];
        } else {
            throw new Error(`Item with ID ${id} not found in the database`);
        }
    } catch (error) {
        // Handle errors
        console.error('Error retrieving item from the database:', error);
        throw error; // Re-throw the error to be caught by the calling function
    }
}