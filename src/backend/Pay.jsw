import { fetch } from 'wix-fetch';
import { STRIPE_SECRET_KEY } from './PayKeys';
import wixData from 'wix-data';
import * as Orders from './Orders';

const apiKey = STRIPE_SECRET_KEY; // DO NOT SHARE THIS KEY
const stripeApiUrl = "https://api.stripe.com/v1";

export async function charge(token, orderObj) {
    console.log("Charge has been called");
    const customerId = await createOrRetrieveCustomer(orderObj);
    const chargeObj = await createChargeObj(orderObj);
    let orderCreatedStatus = await Orders.issueOrder(orderObj, chargeObj);
    if (orderCreatedStatus == "failed") {
        return { "error": "Failed to create order" };
    }
    else {
        // charge
        const response = await fetch(`${stripeApiUrl}/charges`, {
            method: 'post',
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Authorization": "Bearer " + apiKey
            },
            body: encodeBody(token, chargeObj)
        });
        if (response.status >= 200 && response.status < 300) {
            // transaction successful - get charge ID
            // TODO: ADD THE CHARGEDID TO THE ORDER IN THE DATABASE
            const ret = await response.json();
            return { "chargeId": ret.id };
        }
        else {
            // transaction failed - return error type
            // TODO: !!!! REMOVE THE ORDER FROM THE DATABASE
            Orders.deleteOrder(orderObj, chargeObj);
            let res = await response.json();
            let err = res.error.type;
            return { "error": err };
        }
    }
}

async function createOrRetrieveCustomer(orderObj) {
    // Check if the customer exists
    const existingCustomerResponse = await fetch(`${stripeApiUrl}/customers?email=${orderObj.email}`, {
        method: 'get',
        headers: {
            "Authorization": "Bearer " + apiKey
        }
    });
    if (existingCustomerResponse.status === 200) {
        const existingCustomerData = await existingCustomerResponse.json();
        if (existingCustomerData.data.length > 0) {
            return existingCustomerData.data[0].id;
        }
    }

    // If the customer does not exist, create a new one
    const newCustomerResponse = await fetch(`${stripeApiUrl}/customers`, {
        method: 'post',
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": "Bearer " + apiKey
        },
        body: `name=${orderObj.name}&email=${orderObj.email}&phone=${orderObj.phone}`
    });
    if (newCustomerResponse.status === 200) {
        const newCustomerData = await newCustomerResponse.json();
        return newCustomerData.id;
    }

    // If creation fails, return null
    return null;
}

function encodeBody(token, chargeObj) {
    let encoded = "";
    for (let [k, v] of Object.entries(chargeObj)) {
        encoded = encoded.concat(k, "=", encodeURI(v), "&");
    }
    encoded = encoded.concat("source=", encodeURI(token));
    return encoded;
}

async function createChargeObj(orderObj) {
    let totalPrice = 0;
    let description = "поръчка: ";
    // Create an array to store all the promises returned by the wixData queries
    let promises = [];

    // Iterate over the IDs and amounts
    orderObj.ids.forEach((id, i) => {
        // Push each query promise to the array
        promises.push(
            wixData.query("FoodList")
                .eq("_id", id)
                .find()
                .then((results) => {
                    totalPrice += parseFloat(results.items[0].price) * orderObj.amounts[i];
                    description += results.items[0].title + " x" + orderObj.amounts[i] + ", ";
                })
        );
    });

    // Wait for all the promises to resolve
    await Promise.all(promises);

    // Round totalPrice to 2 decimal places
    totalPrice = totalPrice.toFixed(2);

    // Return the chargeObj object
    return {
        "amount": (totalPrice * 100).toFixed(0), // convert to cents
        "currency": "BGN",
        "description": description,
        "receipt_email": orderObj.email,
        // "customer": customerId, // gives errors at the moment
    };
}
export async function issuePayout(providerId, amount) {
    const provider = await wixData.query("ProviderList").eq("_id", providerId).find();
    const iban = provider.items[0].iban;
    console.log("IBAN: " + iban + "\n Amount in cents: " + amount);
    const response = await fetch(`${stripeApiUrl}/payouts`, {
        method: 'post',
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": "Bearer " + apiKey
        },
        // body: `amount=${amount}&currency=BGN&destination=${iban}`
        body: `amount=${amount}&currency=BGN`
    });
    if (response.status >= 200 && response.status < 300) {
        // payout successful
        const ret = await response.json();
        console.log("Payout successful:", ret);
    } else {
        // payout failed
        const res = await response.json();
        console.error("Payout failed:", res.error);
    }
}
