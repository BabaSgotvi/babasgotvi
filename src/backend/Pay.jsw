import wixPayBackend from 'wix-pay-backend';
import wixData from 'wix-data';
import { STRIPE_SECRET_KEY } from 'backend/PayKeys';
export async function createPaymentObj(ids, amounts) {
    console.log("Creating payment object");
    console.log("ids: " + ids);
    console.log("amounts: " + amounts);

    let orderItems = [];

    // Iterate over the IDs array
    for (let i = 0; i < ids.length; i++) {
        try {
            // Retrieve the item from the database using await to wait for the asynchronous operation
            const item = await getItemFromDatabase(ids[i]);

            // Get the quantity corresponding to the current item
            const quantity = amounts[i] || 1; // If the quantity is not provided, default to 0
            const price = parseFloat(item.price).toFixed(2);
            // Create an object for the item
            const orderItem = {
                name: item.title,
                price: price,
                quantity: quantity
            };

            // Add the object to the array
            orderItems.push(orderItem);
        } catch (error) {
            console.error(`Error retrieving item with ID ${ids[i]}:`, error);
        }
    }

    // Calculate the total amount
    const totalAmount = orderItems.reduce((total, item) => total + (item.price * item.quantity), 0);

    // Create the payment object
    const paymentObj = await wixPayBackend.createPayment({
        items: orderItems,
        amount: totalAmount
    });

    return paymentObj;
}

// Function to retrieve item from the database asynchronously
async function getItemFromDatabase(id) {
    try {
        // Query the 'FoodList' collection to find the item with the specified ID
        const queryResult = await wixData.query('FoodList')
            .eq('_id', id) // Filter by the ID
            .find();

        // Check if any item was found
        if (queryResult.items.length > 0) {
            // Return the first item found (assuming IDs are unique)
            return queryResult.items[0];
        } else {
            throw new Error(`Item with ID ${id} not found in the database`);
        }
    } catch (error) {
        // Handle errors
        console.error('Error retrieving item from the database:', error);
        throw error; // Re-throw the error to be caught by the calling function
    }
}

export async function payIBAN(IBAN) {
    console.log("entered the function");
    const apiUrl = 'https://api.stripe.com/v1/transfers';

    // Set up the transfer data
    const transferData = {
        amount: 150, // Amount in cents
        currency: 'bgn', // Currency code
        destination: IBAN, // Set the IBAN directly as the destination
    };

    // Encode the transferData object as a URL-encoded string
    const requestBody = new URLSearchParams();
    for (const key in transferData) {
        if (transferData.hasOwnProperty(key)) {
            requestBody.append(key, transferData[key]);
        }
    }

    // Set up the headers for the request
    const headers = {
        Authorization: `Bearer ${STRIPE_SECRET_KEY}`,
        'Content-Type': 'application/x-www-form-urlencoded', // Set content type to URL-encoded form data
    };

    // Send the transfer request to the Stripe API
    fetch(apiUrl, {
        method: 'POST',
        headers: headers,
        body: requestBody.toString(), // Convert transferData to URL-encoded string
    })
        .then(response => response.json())
        .then(data => console.log(data))
        .catch(error => console.error('Error:', error));
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////


// import { fetch } from 'wix-fetch';

// export function charge(token, cart) {

//     //Go to stripe.com to create a test key and replace the one in the example
// const apiKey = "apikeyhere";

//     return fetch("https://api.stripe.com/v1/charges", {
//         method: 'post',
//         headers: {
//             'Accept': 'application/json',
//             'Content-Type': "application/x-www-form-urlencoded",
//             'Authorization': "Bearer " + apiKey
//         },
//         body: encodeBody(token, cart)

//     })
//         .then((httpResponse) => {
//             if (httpResponse.ok) {
//                 return httpResponse.json();
//             }
//         });

// }
// function encodeBodyToken(token, cart) {

//     let encoded = "";

//     for (let [k, v] of Object.entries(cart)) {
//         encoded = encoded.concat(k, "=", encodeURI(v), "&");
//     }
//     encoded = encoded.concat("source=", encodeURI(token));
//     console.log("Encoded" + encoded);
//     return encoded;
// }